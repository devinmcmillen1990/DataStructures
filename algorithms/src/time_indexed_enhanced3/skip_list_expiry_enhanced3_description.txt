 EnhancedSkipListExpiry3 – Design Plan
✅ 1. Replace Vec<T> with IndexSet<T>
    - Why: Vec<T> has linear-time lookup for duplicates (contains). IndexSet (from indexmap crate) gives 
        near-constant-time lookups while preserving insertion order.
    - Effect: Removes the bucket.contains(&id) bottleneck during inserts.

✅ 2. Use FxHashSet or AHashSet instead of HashMap for id_to_bucket
    - Why: Both provide faster hashing performance compared to Rust's default HashMap because they're optimized 
        for short keys and small inputs.
    - Effect: Faster insertions and removals from id_to_bucket.

✅ 3. Memory Pooling for Buckets
    - Why: Instead of allocating/deallocating a new Vec each time, re-use pre-allocated vectors.
    - Effect: Reduces allocation cost and improves cache locality.

✅ 4. Lock Optimization: Use parking_lot::RwLock
    - Why: parking_lot's RwLock is generally faster and more lightweight, especially under low contention.
    - Effect: Lower synchronization overhead in multithreaded cases.

✅ 5. Pre-validate Expiry Bounds (optional but good for throughput)
    - Before calculating offset, short-circuit with if expire_at < now || expire_at >= now + (capacity * 
        resolution_secs).

✅ 6. Optional: Use bumpalo allocator or slab allocation
    -For extreme performance tuning, you could allocate all buckets using a bump allocator, which is super fast 
        and avoids fragmentation.